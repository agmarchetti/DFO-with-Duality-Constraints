%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    DFO with Duality Constraints                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           Author: Alejandro G. Marchetti.   Year: 2024            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%clear allclose allclcopen 3Map.figholdu1 = 2;u2 = 5;u3 = 3;% u2 = 0;u = [u1 u2 u3];param% h = 0.01% h = 2*sqrt(delt/L); %0.5;% EU = L*sqrt(2)*h/2 + 2*delt*sqrt(2)/h;H0 = L*eye(3);D = 2*eye(3);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 4TH OPERATIONx0 = u';                                        A_u(:,4) = x0;f0 = 0.5*x0'*D*x0;    f0 = normrnd(f0,stdJ);                                A_f(4) = f0;q0 = 0;                                               %A_q(5) = q0;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIRST OPERATIONx1 = [x0(1)+h, x0(2), x0(3)]';     A_u(:,1) = x1;f1 = 0.5*x1'*D*x1;f1 = normrnd(f1,stdJ);                                A_f(1) = f1;     q1 = 0.5*(x1-x0)'*H0*(x1-x0);                         %A_q(1) = q1;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECOND OPERATIONx2 = [x0(1), x0(2)+h, x0(3)]';                        A_u(:,2) = x2;f2 = 0.5*x2'*D*x2;    f2 = normrnd(f2,stdJ);                                A_f(2) = f2; q2 = 0.5*(x2-x0)'*H0*(x2-x0);                         %A_q(2) = q2;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% THIRD OPERATIONx3 = [x0(1), x0(2), x0(3)+h]';                        A_u(:,3) = x3;f3 = 0.5*x3'*D*x3;f3 = normrnd(f3,stdJ);                                A_f(3) = f3;     q3 = 0.5*(x3-x0)'*H0*(x3-x0);                         %A_q(3) = q3;A_u%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GRADIENT ESTIMATIONU = [x1-x0 x2-x0 x3-x0];Yf = [f1-f0, f2-f0, f3-f0];Yq = [q1-q0, q2-q0, q3-q0];g0 = Yf*inv(U);        A_g(1,:) = g0;lambda0 = (Yf - Yq)*inv(U);g0% Gradient normgnorm = norm(g0)% Gradient error boundr = 0.5*norm([(x1-x0)'*(x1-x0), (x2-x0)'*(x2-x0), (x3-x0)'*(x3-x0)]*inv(U));Tr = L*rEU = EUo; % max(gnorm/4,EUo);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% INITIAL GUESSES    n0 = null([x2'-x0'; x3'-x0']);  b0 = n0'*x0;    dg = 1; %norm(x0-x2); %/sqrt(2);    xm = (x0+x2+x3)/3;        xX = xm + dg/norm(n0)*n0;    xY = xm - dg/norm(n0)*n0;        if b0 - n0'*xX < 0        input0I  = xX;        input0II = xY;    else        input0I  = xY;        input0II = xX;    end% figure(1)% plot3(A_u(1,:),A_u(2,:),A_u(3,:),'-o')% hold% plot3(input0I(1),input0I(2),input0I(3),'o')% plot3(input0II(1),input0II(2),input0II(3),'o')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DUAL OPTIMIZATION PROBLEMSoptions = optimset('Display','iter','MaxFunEvals',5000,'MaxIter',2000,'TolFun',1e-8,'TolX',1e-8);inputmin = [-15 -15 -15];inputmax = [15 15 15];Xant = [x2 x3 x0];  fk = f0;  Hk = H0;    % OPTIMIZATION I    aux1 = 1;        [inputI,fvalI] = fmincon(@intmod,input0I,[],[],[],[],inputmin,inputmax,@consmod2,options,fk,Xant,lambda0,aux1,Hk,n0,b0,EU);        u1 = inputI(1); u2 = inputI(2);         u3 = inputI(3);     xI = [u1 u2 u3]';        JmodI  = fvalI;    % OPTIMIZATION II        aux1 = 2;        [inputII,fvalII] = fmincon(@intmod,input0II,[],[],[],[],inputmin,inputmax,@consmod2,options,fk,Xant,lambda0,aux1,Hk,n0,b0,EU);        u1 = inputII(1); u2 = inputII(2);         u3 = inputII(3);   xII = [u1 u2 u3]';        JmodII  = fvalII;    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % BEST VALUE        if JmodI <= JmodII        A_u(:,5) = xI;    else        A_u(:,5) = xII;    end% figure(1)% plot3(A_u(1,:),A_u(2,:),A_u(3,:),'-o')% hold% plot3(xI(1),xI(2),xI(3),'o')% plot3(xII(1),xII(2),xII(3),'o')%%%%%%%%%% START ITERATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%NbrItrs = 60;for i = 5:NbrItrs+5    x0 = A_u(:,i);  x1 = A_u(:,i-1);  x2 = A_u(:,i-2);    x3 = A_u(:,i-3);     f0 = 0.5*x0'*D*x0;    f0 = normrnd(f0,stdJ);              A_f(i) = f0;     f1 = A_f(i-1);  f2 = A_f(i-2);    f3 = A_f(i-3);      q1 = 0.5*(x1-x0)'*Hk*(x1-x0);  q0 = 0;    q2 = 0.5*(x2-x0)'*Hk*(x2-x0);    q3 = 0.5*(x3-x0)'*Hk*(x3-x0);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % GRADIENT ESTIMATION    U = [x1-x0 x2-x0 x3-x0];    Yf = [f1-f0, f2-f0, f3-f0];    Yq = [q1-q0, q2-q0, q3-q0];    g = Yf*inv(U);        A_g(i-3,:) = g;    gnorm = norm(g);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    lambdak = (Yf - Yq)*inv(U);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%    % INITIAL GUESSES    n0 = null([x2'-x0'; x3'-x0']);  b0 = n0'*x0;    dg = 1; %norm(x0-x2); %/sqrt(2);    xm = (x0+x2+x3)/4;        xX = xm + dg/norm(n0)*n0;    xY = xm - dg/norm(n0)*n0;    if b0 - n0'*xX < 0        input0I  = xX;        input0II = xY;    else        input0I  = xY;        input0II = xX;    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % DUAL OPTIMIZATION PROBLEMS    Xant = [x2 x1 x0];  fk = f0;     EU = EUo; % max(gnorm/4,EUo);    % OPTIMIZATION I    aux1 = 1;        [inputI,fvalI] = fmincon(@intmod,input0I,[],[],[],[],inputmin,inputmax,@consmod2,options,fk,Xant,lambdak,aux1,Hk,n0,b0,EU);        u1 = inputI(1); u2 = inputI(2);         u3 = inputI(3);      xI = [u1 u2 u3]';        JmodI  = fvalI;        % OPTIMIZATION II        aux1 = 2;        [inputII,fvalII] = fmincon(@intmod,input0II,[],[],[],[],inputmin,inputmax,@consmod2,options,fk,Xant,lambdak,aux1,Hk,n0,b0,EU);        u1 = inputII(1); u2 = inputII(2);         u3 = inputII(3);    xII = [u1 u2 u3]';        JmodII  = fvalII;       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % BEST VALUE        if JmodI <= JmodII        A_u(:,i+1) = xI;    else        A_u(:,i+1) = xII;    endendfigure(1)plot3(A_u(1,:),A_u(2,:),A_u(3,:),'-o')