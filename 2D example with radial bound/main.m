%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    DFO with Duality Constraints                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           Author: Alejandro G. Marchetti.   Year: 2024            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%clear allclose allclcopen 2Map.figholdu1 = -2;u2 = -2.5;% u2 = 0.5;u = [u1 u2];param% h = 2*sqrt(delt/L); %0.5;% EU = L*sqrt(2)*h/2 + 2*delt*sqrt(2)/h;H0 = L*eye(2);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% THIRD OPERATIONx0 = u';                    A_u(:,3) = x0;f0 = 2*u1^2 - u1*u2 + u2^2 - 3*u1 + 1.4^(2*u1+u2);    f0 = normrnd(f0,stdJ);                                A_f(3) = f0;q0 = 0;                                               A_q(3) = q0;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FIRST OPERATIONx1 = [x0(1)+h, x0(2)]';     A_u(:,1) = x1;u1 = x1(1); u2 = x1(2);f1 = 2*u1^2 - u1*u2 + u2^2 - 3*u1 + 1.4^(2*u1+u2);f1 = normrnd(f1,stdJ);                                A_f(1) = f1;     q1 = 0.5*(x1-x0)'*H0*(x1-x0);                         A_q(1) = q1;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SECOND OPERATIONx2 = [x0(1), x0(2)+h]';     A_u(:,2) = x2;u1 = x2(1); u2 = x2(2);f2 = 2*u1^2 - u1*u2 + u2^2 - 3*u1 + 1.4^(2*u1+u2);    f2 = normrnd(f2,stdJ);                                A_f(2) = f2; q2 = 0.5*(x2-x0)'*H0*(x2-x0);                         A_q(2) = q2;Xant = x0;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GRADIENT ESTIMATIONU = [x1-x0 x2-x0];Yf = [f1-f0, f2-f0];Yq = [q1-q0, q2-q0];g0 = Yf*inv(U);        A_g(1,:) = g0;lambda0 = (Yf - Yq)*inv(U);% Gradient normgnorm = norm(g0)% Gradient error boundr = 0.5*norm([(x1-x0)'*(x1-x0), (x2-x0)'*(x2-x0)]*inv(U));Tr = L*rEU = max(gnorm/4,Effd);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% INITIAL GUESSES    n0 = null([x2'-x0']);  b0 = n0'*x0;    dg = norm(x0-x2); %/sqrt(2);    xm = (x0+x2)/2;        xX = xm + dg/norm(n0)*n0;    xY = xm - dg/norm(n0)*n0;        if b0 - n0'*xX < 0        input0I  = xX;        input0II = xY;    else        input0I  = xY;        input0II = xX;    end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DUAL OPTIMIZATION PROBLEMSoptions = optimset('Display','iter','MaxFunEvals',5000,'MaxIter',2000,'TolFun',1e-8,'TolX',1e-8);inputmin = [-15 -15];inputmax = [15 15];Xant = [x0 x2];  fk = f0;  Hk = H0;    % OPTIMIZATION I    aux1 = 1;        [inputI,fvalI] = fmincon(@intmod,input0I,[],[],[],[],inputmin,inputmax,@consmod,options,fk,Xant,lambda0,aux1,Hk,n0,b0,EU);        u1 = inputI(1); u2 = inputI(2); xI = [u1 u2]';        JmodI  = fvalI;        % OPTIMIZATION II        aux1 = 2;        [inputII,fvalII] = fmincon(@intmod,input0II,[],[],[],[],inputmin,inputmax,@consmod,options,fk,Xant,lambda0,aux1,Hk,n0,b0,EU);        u1 = inputII(1); u2 = inputII(2); xII = [u1 u2]';        JmodII  = fvalII;       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % BEST VALUE        if JmodI <= JmodII        A_u(:,4) = xI;    else        A_u(:,4) = xII;    end%%%%%%%%%% START ITERATIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%NbrItrs = 60;M = [];for i = 4:NbrItrs+4    x0 = A_u(:,i);  x1 = A_u(:,i-1);  x2 = A_u(:,i-2);    f0 = 2*x0(1)^2 - x0(1)*x0(2) + x0(2)^2 - 3*x0(1) + 1.4^(2*x0(1)+x0(2));        f0 = normrnd(f0,stdJ);              A_f(i) = f0;     f1 = A_f(i-1);  f2 = A_f(i-2);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % GRADIENT ESTIMATION    U = [x1-x0 x2-x0];    Yf = [f1-f0, f2-f0];    g = Yf*inv(U);        A_g(i-2,:) = g;    gnorm = norm(g);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    qk = A_g(i-2,:) - A_g(i-3,:);    pk = x0 - x1;    q0 = 0;      q1 = 0.5*(x1-x0)'*Hk*(x1-x0);    q2 = 0.5*(x2-x0)'*Hk*(x2-x0);    Yq = [q1-q0, q2-q0];    lambdak = (Yf - Yq)*inv(U);    %%%%%%%%%%%%%%%%%%%%%%%%%%%%    % INITIAL GUESSES    n0 = null([x1'-x0']);  b0 = n0'*x0;    dg = norm(x0-x1);%     dg = norm(x0-x1)/sqrt(2);    xm = (x0+x1)/2;        xX = xm + dg/norm(n0)*n0;    xY = xm - dg/norm(n0)*n0;        if b0 - n0'*xX < 0        input0I  = xX;        input0II = xY;    else        input0I  = xY;        input0II = xX;    end    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % DUAL OPTIMIZATION PROBLEMS    Xant = [x0 x1];  fk = f0;     M = [M, [gnorm/4,Effd]'];    EU = max(gnorm/4,Effd);    % OPTIMIZATION I    aux1 = 1;        [inputI,fvalI] = fmincon(@intmod,input0I,[],[],[],[],inputmin,inputmax,@consmod,options,fk,Xant,lambdak,aux1,Hk,n0,b0,EU);        u1 = inputI(1); u2 = inputI(2); xI = [u1 u2]';        JmodI  = fvalI;        % OPTIMIZATION II        aux1 = 2;        [inputII,fvalII] = fmincon(@intmod,input0II,[],[],[],[],inputmin,inputmax,@consmod,options,fk,Xant,lambdak,aux1,Hk,n0,b0,EU);        u1 = inputII(1); u2 = inputII(2); xII = [u1 u2]';        JmodII  = fvalII;       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % BEST VALUE        if JmodI <= JmodII        A_u(:,i+1) = xI;    else        A_u(:,i+1) = xII;    endendfigure(1)plot(A_u(1,:),A_u(2,:),'-o')